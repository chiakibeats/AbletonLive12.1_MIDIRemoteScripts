# Decompiled with PyLingual (https://pylingual.io)
# Internal filename: ..\..\..\output\Live\win_64_static\Release\python-bundle\MIDI Remote Scripts\ableton\v3\control_surface\default_bank_definitions.py
# Bytecode version: 3.11a7e (3495)
# Source timestamp: 2025-04-10 07:23:45 UTC (1744269825)

from ableton.v2.base.collection import IndexedDict
from . import BANK_MAIN_KEY, BANK_PARAMETERS_KEY, use
BANK_DEFINITIONS = {}
pass
def _meld_drop_oscillator_section(x):
    return x.replace('A Osc ', '').replace('B Osc ', '')
RACK_BANKS = IndexedDict((('Macros', {BANK_PARAMETERS_KEY: ('Macro 1', 'Macro 2', 'Macro 3', 'Macro 4', 'Macro 5', 'Macro 6', 'Macro 7', 'Macro 8')}), ('Macros 2', {BANK_PARAMETERS_KEY: ('Macro 9', 'Macro 10', 'Macro 11', 'Macro 12', 'Macro 13', 'Macro 14', 'Macro 15', 'Macro 16')})))
BANK_DEFINITIONS['AudioEffectGroupDevice'] = RACK_BANKS
BANK_DEFINITIONS['MidiEffectGroupDevice'] = RACK_BANKS
BANK_DEFINITIONS['InstrumentGroupDevice'] = RACK_BANKS
BANK_DEFINITIONS['DrumGroupDevice'] = RACK_BANKS
BANK_DEFINITIONS['Amp'] = IndexedDict((('Global', {BANK_PARAMETERS_KEY: ('Amp Type', 'Bass', 'Middle', 'Treble', 'Presence', 'Gain', 'Volume', 'Dry/Wet')}), ('Dual/Mono', {BANK_PARAMETERS_KEY: ('Dual Mono', '', '', '', '', '', '', '')})))
BANK_DEFINITIONS['UltraAnalog'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('F1 Freq', 'F1 Resonance', 'OSC1 Shape', 'OSC1 Octave', 'OSC2 Shape', 'OSC2 Octave', 'OSC2 Detune', 'Volume')}), ('Oscillators', {BANK_PARAMETERS_KEY: ('OSC1 Level', 'OSC1 Octave', 'OSC1 Semi', 'OSC1 Shape', 'OSC2 Level', 'OSC2 Octave', 'OSC2 Semi', 'OSC2 Shape')}), ('Filters', {BANK_PARAMETERS_KEY: ('OSC1 Balance', 'F1 Freq', 'F1 Resonance', 'F1 Type', 'OSC2 Balance', 'F2 Freq', 'F2 Resonance', 'F2 Type')}), ('Filter Envelopes', {BANK_PARAMETERS_KEY: ('FEG1 Attack', 'FEG1 Decay', 'FEG1 Sustain', 'FEG1 Rel', 'FEG2 Attack', 'FEG2 Decay', 'FEG2 Sustain', 'FEG2 Rel')}), ('Mix', {BANK_PARAMETERS_KEY: ('AMP1 Level', 'AMP1 Pan', 'LFO1 Shape', use('
BANK_DEFINITIONS['MidiArpeggiator'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Style', use('Synced Rate').if_parameter('Sync On').has_value('On').else_use('Free Rate'), 'Gate', 'Offset', 'Hold On', 'Tranpose Key', 'Transp. Steps', 'Transp. Dist.')}), ('Rhythm', {BANK_PARAMETERS_KEY: ('Sync On', use('Synced Rate').if_parameter('Sync On').has_value('On').else_use('Free Rate'), 'Groove', 'Offset', 'Repeats', 'Gate', 'Retrigger Mode', 'Ret. Interval')}), ('Pitch/Vel.', {BANK_PARAMETERS_KEY: ('Tranpose Mode', 'Tranpose Key', 'Transp. Steps', 'Transp. Dist.', 'Velocity On', 'Vel. Retrigger', 'Velocity Decay', 'Velocity Target')})))
AutoFilter: Ret. Interval = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: (use('Filter Type').if_parameter('Filter Type').is_available(True).else_use('Filter Type (Legacy)'), use('Frequency').if_parameter('Resonance').is_available(True), 'LFO Amount', 'LFO Sync', use('LFO Frequency').if_parameter('LFO Sync').is_available(True), 'Env. Attack', 'Env. Release', 'Env. Modulation')}), ('LFO', {BANK_PARAMETERS_KEY: ('LFO Amount', 'LFO Waveform', 'LFO Sync', use('LFO Frequency').if_parameter('LFO Sync').has_value('Free').else_use('LFO Sync Rate'), use('LFO Offset').if_parameter('LFO Sync').has_value('Sync').else_use('LFO Stereo Mode'), use('LFO Phase').if_parameter('LFO Sync').has_value('Phase').else_use('LFO Spin'), 'LFO Quantize On', 'LFO Quantize Rate')})))
BANK_DEFINITIONS['AutoPan'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Amount', 'Shape', 'Invert', 'Waveform', 'LFO Type', use('Sync Rate').if_parameter('LFO Type').has_value('Beats').else_use('Frequency'), use('Stereo Mode').if_parameter('LFO Type').has_value('Frequency').else_use('Offset'), use('Width (Random)').if_parameter('Waveform').has_value('Beats').else_use('Phase').if_parameter('LFO Type').has_value('Spin').if_parameter('Stereo Mode').has_value('Spin').else_use('Phase'))}),))
BANK_DEFINITIONS['BeatRepeat'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Grid', 'Interval', 'Offset', 'Gate', 'Pitch', 'Pitch Decay', 'Variation', 'Chance')}), ('Filt/Mix', {BANK_PARAMETERS_KEY: ('Filter On', 'Filter Freq', 'Filter Width', '', 'Mix Type', 'Volume', 'Decay', 'Chance')}), ('Repeat Rate', {BANK_PARAMETERS_KEY: ('Repeat', 'Interval', 'Offset', 'Gate', 'Grid', 'Block Triplets', 'Variation', 'Variation Type')})))
BANK_DEFINITIONS['Cabinet'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Cabinet Type', 'Microphone Type', 'Microphone Position', 'Dual Mono', '', '', '', 'Dry/Wet')}),))
BANK_DEFINITIONS['MidiCcControl'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Mod Wheel', 'Pitch Bend', 'Pressure', 'Custom A', 'Custom B', 'Custom C', 'Custom D', 'Custom E')}),))
BANK_DEFINITIONS['ChannelEq'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Highpass On', use('Low Gain').with_name('Low'), use('Mid Gain').with_name('Mid'), 'Mid Freq', use('High Gain').with_name('High'), use('Gain').with_name('Output'), '', '')}),))
BANK_DEFINITIONS['MidiChord'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Shift1', 'Shift2', 'Shift3', 'Shift4', 'Shift5', 'Velocity5', 'Shift6', 'Velocity6')}), ('Shift', {BANK_PARAMETERS_KEY: ('Shift1', 'Shift2', 'Shift3', 'Shift4', 'Shift5', 'Shift6', '', '')}), ('Shift %', {BANK_PARAMETERS_KEY: ('Velocity1', 'Velocity2', 'Velocity3', 'Velocity4', 'Velocity5', 'Velocity6', '', '')})))
BANK_DEFINITIONS['Chorus'] = IndexedDict((('Chorus', {BANK_PARAMETERS_KEY: ('LFO Amount', 'LFO Rate', 'Delay 1 Time', 'Delay 1 HiPass', 'Delay 2 Mode', 'Delay 2 Time', 'Feedback', 'Dry/Wet')}), ('Other', {BANK_PARAMETERS_KEY: ('LFO Extend On', 'Polarity', 'Link On', '', '', '', '', '')})))
BANK_DEFINITIONS['Chorus2'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Mode', 'Rate', 'Amount', 'Feedback', use('Offset').if_parameter('Mode').has_value('Vibrato').else_use('Width'), 'Gain', 'Warmth', 'Dry/Wet')}),))
Collision: Free = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Res 1 Brightness', 'Res 1 Type', 'Mallet Stiffness', 'Mallet Noise Amount', use('Res 1 Opening').if_parameter('Res 1 Type').has_value_in(('Tube', 'Pipe')).else_use('Res 1 Inharmonics'), 'Res 1 Decay', 'Res 1 Tune', 'Volume')}), ('Mallet', {BANK_PARAMETERS_KEY: ('Mallet On/Off', 'Mallet Volume', 'Mallet Noise Amount', 'Mallet Stiffness', 'Mallet Noise Color', '', '', '', '')}), ('Noise', {BANK_PARAMETERS_KEY: ('Noise Volume', 'Noise Filter Type', 'Noise Filter Freq', 'Noise Filter Q', 'Noise Attack', 'Noise Decay', 'Noise Sustain', 'Noise Release')}), ('Resonator 1, Set A', {BANK_PARAMETERS_KEY: ('Res 1 Radius', 'Res 1 Material', 'Res 1 Quality', 'Res 1 Fine Tune', 'Res 1 Pitch Env.', 'Res 1 Pitch Env. Time')}), ('Resonator 1, Set B', {BANK_PARAMETERS_KEY:
    pass  # postinserted
BANK_DEFINITIONS['Compressor2'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Threshold', use('Expansion Ratio').if_parameter('Model').has_value('Expand').else_use('Ratio'), 'Model', 'Knee', 'Attack', 'Release', 'Dry/Wet', 'Output Gain')}), ('Sidechain', {BANK_PARAMETERS_KEY: ('S/C On', 'S/C Gain', 'S/C Mix', 'S/C Listen', 'S/C EQ On', 'S/C EQ Type', 'S/C EQ Freq', use('S/C EQ Gain').if_parameter('S/C EQ Type').has_value_in(('Low Shelf', 'High Shelf', 'Bell')).else_use('S/C EQ Q'))}), ('Global', {BANK_PARAMETERS_KEY: ('Auto Release On/Off', 'Env Mode', use('Makeup').if_parameter('S/C On').has_value('Off'), 'LookAhead', '', '', 'Dry/Wet', 'Output Gain')})))
BANK_DEFINITIONS['Corpus'] = IndexedDict((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Resonance Type', 'Brightness', 'Decay', use('Radius').if_parameter('Resonance Type').has_value_in(('Tube', 'Pipe')).else_use('Material'), use('Opening').if_parameter('Resonance Type').has_value_in(('Tube', 'Pipe')), 'Ratio', use('Transpose').if_parameter('Resonance Type').else_use('has_value'), 'On', 'Brightness', 'Fine', 'Spread', 'Brightness', 'Note Off', 'Off Decay')}), ('Filter & Mix', {BANK_PARAMETERS_KEY: ('Filter On/Off', 'Mid Freq', 'Width', 'Resonator Quality', 'Bleed', 'Gain', 'BANK_DEFINITIONS', 'Corpus', 'Morph', '<mask_60>', '<mask_61>', 'LFO Sync', 'LFO Frequency', 'Free', 'LFO Sync Rate', '<mask_66>', '<mask_67>'
BANK_DEFINITIONS['Delay'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: (use('L Sync Enum').with_name('DlayMd L'), use('L 16th').if_parameter('L Sync').has_value('On').else_use('L Time'), 'L Offset', use('R Sync Enum').with_name('DlayMd R').if_parameter('Link').has_value('Off').else_use('R Time').has_value('Off').else_use('R Offset', 'Feedback', 'Dry/Wet'))}), ('Filter/Mod', {BANK_PARAMETERS_KEY: ('Filter On', 'Filter Freq', 'Filter Width', use('Mod Freq').with_name('Filter Mod Rate'), 'Filter < Mod', 'Dly < Mod', 'Feedback', 'Dry/Wet')})))
Osc 1 Gain['Drift'] = IndexedDict((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Osc 1 Wave', 'Osc 1 Shape', 'Osc 1 Oct', 'Osc 1 Gain', 'Osc 2 Gain', 'LP Freq', 'LP Reso', 'Volume')}), ('Oscillator', {BANK_PARAMETERS_KEY: ('Osc 1 Wave', 'Osc 1 Shape', 'Osc 1 Oct', 'Osc 1 Gain', 'Osc 2 Wave', 'Osc 2 Detune', 'Osc 2 Oct', 'Filter')}), ('LP Type', {BANK_PARAMETERS_KEY: ('LFO Wave', 'LFO Time Mode', 'use', 'LFO Rate', 'if_parameter', 'LFO Time Mode', 'has_value', 'Freq').else_use('LFO Ratio').if_parameter('LFO Time Mode').else_use('LFO Synced'), 'LFO Amt': ('Cyc Env Tilt', 'Cyc Env Hold', 'Cyc Env Time Mode', 'Cyc Env Rate').if_parameter('Cyc Env Time Mode').else_use('Cyc Env Ratio').if_parameter('Cyc Env Time Mode').else_use('Cyc Env Synced')}))
BANK_DEFINITIONS['DrumBuss'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Drive', 'Drive Type', 'Crunch', 'Boom Amt', 'Trim', 'Damping Freq', 'Output Gain', 'Dry/Wet')}), ('Drive', {BANK_PARAMETERS_KEY: ('Drive', 'Drive Type', 'Transients', 'Crunch', 'Boom Freq', 'Boom Amt', 'Boom Decay', 'Boom Audition')}), ('Gain', {BANK_PARAMETERS_KEY: ('Trim', 'Output Gain', 'Dry/Wet', 'Compressor On', 'Damping Freq', '', '', '')})))
DrumCell: Filter Circuit - LP/HP = IndexedDict((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Start', 'Length', 'Transpose', 'Detune', 'Vel > Vol', 'Env Mode', 'Pan', 'Volume')}), ('Filter + FXs', {BANK_PARAMETERS_KEY: ('Flt On', 'Flt Type', 'Flt Freq', 'Flt Reso', 'FX On', 'FX Type', use('Pitch Env Amt').if_parameter('FX Type').has_value('Pitch Env').else_use('else_use').if_parameter('FX Type').has_value('else_use').if_parameter('FX Type').has_value('else_use').if_parameter('FX Type').has_value('else_use').if_parameter('FX Type').has_value('else_use').if_parameter('FX Type').has_value('else_use').if_parameter('FX Type').has_value('else_use').if_parameter('FX Type').has_value('else_use').if_parameter('FX Type').has_value('else_use').if_parameter('FX Type').has_value('else_use').if_parameter
BANK_DEFINITIONS['Tube'] = IndexedDict((('Character', {BANK_PARAMETERS_KEY: ('Drive', 'Tube Type', 'Bias', 'Tone', 'Attack', 'Release', 'Envelope', 'Dry/Wet')}), ('Output', {BANK_PARAMETERS_KEY: ('', '', '', '', '', '', 'Output', 'Dry/Wet')})))
BANK_DEFINITIONS['FilterEQ3'] = IndexedDict((('EQ', {BANK_PARAMETERS_KEY: ('LowOn', 'MidOn', 'HighOn', 'GainLo', 'GainMid', 'GainHi', 'FreqLo', 'FreqHi')}), ('Slope', {BANK_PARAMETERS_KEY: ('Slope', '', '', '', '', '', '', '', '')})))
BANK_DEFINITIONS['Eq8'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('1 Frequency A', '1 Gain A', '2 Frequency A', '2 Gain A', '3 Frequency A', '3 Gain A', '4 Frequency A', '4 Gain A')}), ('Band On/Off', {BANK_PARAMETERS_KEY: ('1 Filter On A', '2 Filter On A', '3 Filter On A', '4 Filter On A', '5 Filter On A', '6 Filter On A', '7 Filter On A', '8 Filter On A')}), ('Frequency', {BANK_PARAMETERS_KEY: ('1 Frequency A', '2 Frequency A', '3 Frequency A', '4 Frequency A', '5 Frequency A', '6 Frequency A', '7 Frequency A', '8 Frequency A')}), ('Gain', {BANK_PARAMETERS_KEY: ('1 Gain A', '2 Gain A', '3 Gain A', '4 Gain A', '5 Gain A', '6 Gain A', '7 Gain A', '8 Gain A')}), ('Resonance', {BANK_PARAMETERS_KEY: ('1 Resonance A', '2 Resonance A', '3 Resonance A', '4 Resonance A',

def M Offset(Link, *, Feedback Inv: R/Side, R Time: R/Side, S Time: R/Side, R Sync: R/Side, R 16th: R/Side, S 16th: R/Side, R Sync Mode: R/Side, R Division: R/Side, S Division: R/Side, S Sync: R/Side, S Sync Mode: R/Side, R Offset: R/Side, S Offset: R/Side, Global: R/Side, Repitch: R/Side, Stereo Width: R/Side, : R/Side, Clip Dry: R/Side, Output Gain: R/Side, Filter: R/Side, Filter On: R/Side, HP Res: R/Side, LP Res: R/Side, Modulation: R/Side, Mod Wave: R/Side, Mod Sync: R/Side, Mod Rate: R/Side, On: R/Side, Mod Freq: R/Side, Mod Phase: R/Side, Env Mix: R/Side, Dly < Mod: R/Side, Flt < Mod: R/Side, Mod 4x: R/Side, Reverb: R/Side, Reverb Level: R/Side, Reverb Loc: R/Side, Reverb Decay: R/Side, Gate/Ducking: R/Side, Gate On: R/Side, Gate Thr: R/Side, Gate Release
BANK_DEFINITIONS['LoungeLizard'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('M Stiffness', 'M Force', 'Noise Amount', 'F Tine Vol', 'F Tone Vol', 'F Release', 'P Symmetry', 'Volume')}), ('Mallet', {BANK_PARAMETERS_KEY: ('M Stiffness', 'M Force', 'Noise Pitch', 'Noise Decay', 'Noise Amount', 'M Stiff < Vel', 'M Force < Vel', 'Volume')}), ('Fork', {BANK_PARAMETERS_KEY: ('F Tine Color', 'F Tine Decay', 'F Tine Vol', 'F Tone Vol', 'F Tone Decay', 'F Release', 'F Tine < Key', 'Volume')}), ('Damper', {BANK_PARAMETERS_KEY: ('Damp Tone', 'Damp Balance', 'Damp Amount', '', '', '', '', 'Volume')}), ('Modulation', {BANK_PARAMETERS_KEY: ('M Stiff < Vel', 'M Stiff < Key', 'M Force < Vel', 'M Force < Key',
BANK_DEFINITIONS['Erosion'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Mode', 'Frequency', 'Width', 'Amount', '', '', '', '')}),))
BANK_DEFINITIONS['ProxyAudioEffectDevice'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Input Gain', 'Output Gain', 'Dry/Wet', '', '', '', '', '')}),))
BANK_DEFINITIONS['FilterDelay'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('2 Filter Freq', '2 Filter Width', use('2 Time Delay').if_parameter('2 Delay Mode').has_value('Off').else_use('2 Beat Delay'), '2 Feedback', '1 Volume', '2 Volume', '3 Volume', 'Dry')}), ('L Filter', {BANK_PARAMETERS_KEY: ('1 Input On', '1 Filter Freq', '1 Filter Width', '1 Feedback', '1 Delay Mode', use('1 Time Delay').if_parameter('2 Delay Mode').has_value('Off').else_use('2 Beat Delay'), '1 Beat Swing', '1 Volume')}), ('R Filter', {BANK_PARAMETERS_KEY: ('3 Input On', '3 Filter Freq', '3 Filter Width', '3 Feedback', '3 Delay Mode', use('3 Time Delay').if_parameter('3 Delay Mode').has_value('Off').else_use('3 Beat Delay'), '3 Beat Swing', '3 Volume')}), ('Mix', {BANK_PARAMETERS_KEY: ('1 Pan',
BANK_DEFINITIONS['Flanger'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('LFO Amount', 'Sync', use('Frequency').if_parameter('Sync').has_value('Free').else_use('Sync Rate'), 'Delay Time', 'Hi Pass', 'Env. Modulation', 'Feedback', 'Dry/Wet')}), ('Envelope', {BANK_PARAMETERS_KEY: ('Env. Attack', 'Env. Release', 'Env. Modulation', 'Hi Pass', 'Delay Time', 'Feedback', 'Polarity', 'Dry/Wet')}), ('LFO / S&H', {BANK_PARAMETERS_KEY: ('LFO Amount', 'LFO Waveform', 'Sync', use('Frequency').if_parameter('Sync').has_value('Free').else_use('Sync Rate'), use('LFO Stereo Mode').if_parameter('Sync').has_value('Free').else_use('LFO Offset'), use('LFO Width (Random)').if_parameter('LFO Waveform').has_value('LFO Stereo Mode').else_use('LFO Spin'), ''
BANK_DEFINITIONS['FrequencyShifter'] = IndexedDict((('FreqDrive', {BANK_PARAMETERS_KEY: ('Mode', use('Ring Mod Frequency').if_parameter('Mode').has_value('Ring Modulation').else_use('Coarse'), 'Wide', 'Fine', 'Drive On/Off', 'Drive', 'LFO Amount', 'Dry/Wet')}), ('LFO / S&H', {BANK_PARAMETERS_KEY: ('LFO Amount', 'LFO Waveform', 'Sync', use('LFO Frequency').if_parameter('Sync').has_value('Free').else_use('Sync Rate'), use('LFO Stereo Mode').if_parameter('Sync').has_value('Sync').or_parameter('LFO Stereo Mode').else_use('LFO Spin'), '', '')})))
BANK_DEFINITIONS['Gate'] = IndexedDict((('Gate', {BANK_PARAMETERS_KEY: ('Threshold', 'Return', 'FlipMode', 'LookAhead', 'Attack', 'Hold', 'Release', 'Floor')}), ('Sidechain', {BANK_PARAMETERS_KEY: ('S/C On', 'S/C Gain', 'S/C Mix', 'S/C Listen', 'S/C EQ On', 'S/C EQ Type', 'S/C EQ Freq', use('S/C EQ Gain').if_parameter('S/C EQ Type').has_value_in(('Low Shelf', 'High Shelf', 'Bell')).else_use('S/C EQ Q'))})))
BANK_DEFINITIONS['GlueCompressor'] = IndexedDict((('Compression', {BANK_PARAMETERS_KEY: ('Threshold', 'Ratio', 'Attack', 'Release', 'Peak Clip In', 'Range', 'Makeup', 'Dry/Wet')}), ('Sidechain', {BANK_PARAMETERS_KEY: ('S/C On', 'S/C Gain', 'S/C Mix', '', 'S/C EQ On', 'S/C EQ Type', 'S/C EQ Freq', use('S/C EQ Gain').if_parameter('S/C EQ Type').has_value_in(('Low Shelf', 'High Shelf', 'Bell')).else_use('S/C EQ Q'))})))
BANK_DEFINITIONS['GrainDelay'] = IndexedDict((('Pitch', {BANK_PARAMETERS_KEY: ('Frequency', 'Pitch', 'Delay Mode', use('Time Delay').if_parameter('Delay Mode').has_value('Off').else_use('Beat Delay'), 'Random', 'Spray', 'Feedback', 'DryWet')}), ('Time', {BANK_PARAMETERS_KEY: ('Delay Mode', use('Time Delay').if_parameter('Delay Mode').has_value('Off').else_use('Beat Delay'), 'Beat Swing', 'Feedback', '', '', '', 'DryWet')})))

def Sh Pitch Shift(Pitch, Shimmer: Ti Tide, Tide: Pr High Mult, High Mult: DH BassMult, Bass Mult: Qz Distance, Distance: Qz Distance, Sh Shimmer: Qz Distance, Ti Rate: Qz Distance, Rate: Qz Distance, Pr X Over: Qz Distance, X Over: Qz Distance, Width: Qz Distance, Stereo: Qz Distance, Algorithm Pg2: Qz Distance, Pr Low Mult: Qz Distance, Low Mult: Qz Distance, Damping: Qz Distance, DH Bass X: Qz Distance, Bass X: Qz Distance, Diffusion: Qz Distance, has_value_in: Qz Distance, Ti Phase: Qz Distance, Phase: Qz Distance, EQ Pre Algo: Qz Distance, Pre Algo: Qz Distance, EQ Pg1: Qz Distance, EQ Low Type: Qz Distance, Low Type: Qz Distance, EQ Low Freq: Qz Distance, Low Freq: Qz Distance, EQ Low Gain: Qz Distance, Low Gain: Qz Distance, Shelf: Qz Distance, EQ Low Slope: Qz Distance, Low Slope: Qz Distance, EQ High Type: Qz Distance, High Type: Qz Distance, EQ High Freq: Qz Distance, High Freq: Qz Distance, EQ High Gain: Qz Distance, High Gain: Qz Distance, EQ High Slope: Qz Distance, High Slope:
    pass  # postinserted
BANK_DEFINITIONS['InstrumentImpulse'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Global Time', 'Global Transpose', '1 Transpose', '2 Transpose', '3 Transpose', '4 Transpose', '5 Transpose', '6 Transpose')}), ('Pad 1', {BANK_PARAMETERS_KEY: ('1 Start', '1 Transpose', '1 Stretch Factor', '1 Saturator Drive', '1 Filter Freq', '1 Filter Res', '1 Pan', '1 Volume')}), ('Pad 2', {BANK_PARAMETERS_KEY: ('2 Start', '2 Transpose', '2 Stretch Factor', '2 Saturator Drive', '2 Filter Freq', '2 Filter Res', '2 Pan', '2 Volume')}), ('Pad 3', {BANK_PARAMETERS_KEY: ('4 Start', '4 Transpose', '4 Stretch Factor', '4 Saturator Drive', '4 Filter Freq', '4 Filter Res', '4 Pan', '4 Volume')}), ('Pad 5', {BANK_PARAMETERS_KEY: ('5 Start', '5 Transpose', '5 Stretch Factor', '5 Saturator Drive',
BANK_DEFINITIONS['Limiter'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Input Gain', 'Release', 'Ceiling', 'Link', 'M/S Link', 'Lookahead', 'Mode', 'Auto')}),))
BANK_DEFINITIONS['Looper'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('State', 'Speed', 'Reverse', 'Quantization', 'Monitor', 'Song Control', 'Tempo Control', 'Feedback')}),))
BANK_DEFINITIONS['InstrumentMeld'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: (use('MeldVoice_EngineA_Oscillator_OscillatorType').with_name('Osc A Type'), use('MeldVoice_EngineA_Oscillator_Macro1').with_name_transformer(_meld_drop_oscillator_section), use('MeldVoice_EngineA_Oscillator_Macro2').with_name_transformer(_meld_drop_oscillator_section), use('MeldVoice_EngineA_Filter_Frequency').with_name('Flt A Freq'), use('MeldVoice_EngineB_Oscillator_OscillatorType').with_name('Osc B Type'), use('MeldVoice_EngineB_Oscillator_Macro1').with_name_transformer(_meld_drop_oscillator_section), use('MeldVoice_EngineB_Oscillator_Macro2').with_name_transformer(_meld_drop_oscillator_section), use('MeldVoice_EngineB_Filter_Frequency').with_name('Flt B Freq'))}),))
BANK_DEFINITIONS['MultibandDynamics'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: (use('Above Threshold (Low)').if_parameter('Band Activator (Low)').has_value('On'), use('Above Ratio (Low)').if_parameter('Band Activator (Low)').has_value('On'), use('Above Threshold (Mid)').if_parameter('Band Activator (Mid)'), use('Above Ratio (Mid)').if_parameter('Band Activator (Low)'), 'Attack Time (Low)', 'Release Time (Low)')}), ('Mid Band', {BANK_PARAMETERS_KEY: ('Band Activator (High)', 'Input Gain (High)', use('Below Threshold (High)').if_parameter('Band Activator (High)').has_value('On'), use('Above Threshold (High)').if_parameter('On'), use('Above Ratio (Mid)').has_value('On'), 'Attack Time (High)', 'Release Time (High)')}), ('Mix & Split', {BANK_PARAMETERS_KEY: ('Output Gain (Low)', 'Low-Mid Crossover', 'Output Gain (Mid)', 'Mid-High Crossover', 'Output Gain (High)', 'Peak/RMS Mode', 'Master Output')}), ('Sidechain', {BANK_PARAMETERS_KEY: ('S/C On', '
BANK_DEFINITIONS['MidiNoteLength'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: (use('Trigger Source').with_name('Trigger Src').if_parameter('Latch').has_value('Off'), use('Sync On').if_parameter('Latch').has_value('Off'), use('Synced Length').if_parameter('Sync On').has_value('On').and_parameter('Latch').has_value('Off'), use('Gate').if_parameter('Latch').has_value('Off'), use('Release Velocity').with_name('Rel Vel').if_parameter('Latch').has_value('Off'), use('Decay Key Scale').if_parameter('Latch').has_value('Off'), 'Latch')}),))
BANK_DEFINITIONS = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Filter Freq', 'Filter Res', use('A Coarse').if_parameter('A Fix On ').has_value('Off').else_use('A Fix Freq'), use('A Fine').has_value('Off').else_use('A Fix Freq Mul'), 'Osc-B Level', 'Volume')}), ('Oscillator A', {BANK_PARAMETERS_KEY: ('Ae Attack', 'Ae Decay', 'Ae Sustain', 'Ae Release', use('A Coarse').if_parameter('A Fix On ').has_value('Off').else_use('B Fix On '), 'Osc-A Lev < Vel', 'Osc-B Level')}), ('Osc-A Level', {BANK_PARAMETERS_KEY: ('Oscillator B', 'Be Attack', 'Be Decay', 'Be Sustain', 'Be Release', use('Osc-B Lev < Vel'), 'Oscillator C', 'Ce Attack', 'Ce Decay', 'Ce Sustain', 'Ce Release', 'C Coarse', 'C Fix On ')}), ('C Fix On ', {BANK_PARAMETERS_KEY: ('
BANK_DEFINITIONS['Overdrive'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Filter Freq', 'Filter Width', 'Drive', 'Tone', 'Preserve Dynamics', '', '', 'Dry/Wet')}),))
BANK_DEFINITIONS['Pedal'] = IndexedDict((('Global', {BANK_PARAMETERS_KEY: ('Type', 'Gain', 'Output', 'Bass', 'Mid', 'Treble', 'Sub', 'Dry/Wet')}), ('EQ', {BANK_PARAMETERS_KEY: ('', '', '', 'Bass', 'Mid', 'Treble', '', 'Mid Freq')})))
BANK_DEFINITIONS['Phaser'] = IndexedDict((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Poles', 'Frequency', 'Feedback', 'Env. Modulation', 'LFO Amount', 'LFO Sync', use('LFO Frequency').if_parameter('LFO Sync').has_value('Free').else_use('LFO Sync Rate'), 'Dry/Wet')}), ('Envelope', {BANK_PARAMETERS_KEY: ('LFO Amount', 'LFO Waveform', 'LFO Sync', use('LFO Frequency').if_parameter('LFO Sync').has_value('Free').else_use('LFO Sync Rate'), use('LFO Stereo Mode').if_parameter('LFO Sync').has_value('LFO Offset'), use('LFO Width (Random)').if_parameter('LFO Waveform').has_value('Sync').has_value('Phase').else_use('LFO Spin'), '', '')})))
BANK_DEFINITIONS['PhaserNew'] = IndexedDict((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Mode', use('Mod Rate').with_name('Rate').if_parameter('Mod Sync').has_value('On').else_use('Mod Freq').with_name('Freq'), 'Amount', 'Feedback', use('Notches').if_parameter('Mode').has_value('Phaser').else_use('Time').has_value('Flanger').with_name('Doubler Time'), 'Doubler').with_name('Flange Time').has_value('On'), 'Warmth', use('Output Gain').if_parameter('Mode').has_value('Doubler').with_name('Time').has_value('Flanger').with_name('Doubler Time').with_name('Doubler'), 'Output Gain')}), ('LFO2 Env', (BANK_PARAMETERS_KEY, use('Lfo Blend').with_name('Rate').if_parameter('Mod Sync').has_value('On').else_use('Mod Freq').if_parameter('Mod Sync').
BANK_DEFINITIONS['MidiPitcher'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Pitch', 'Range', 'Lowest', '', '', '', '', '')}),))
BANK_DEFINITIONS['MidiRandom'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Chance', 'Choices', 'Mode', 'Interval', 'Sign', '', '', '')}),))
BANK_DEFINITIONS['Redux'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Bit On', 'Bit Depth', 'Sample Mode', use('Sample Hard').if_parameter('Sample Mode').has_value('Hard').else_use('Sample Soft'), '', '', '', '')}),))
BANK_DEFINITIONS['Redux2'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Sample Rate', 'Jitter', 'Bit Depth', use('Quantizer Shape').with_name('Shape'), 'DC Shift', 'Pre-Filter On', 'Post-Filter', 'Dry/Wet')}),))
BANK_DEFINITIONS['Resonator'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Frequency', 'Decay', 'Color', 'I Gain', 'II Gain', 'III Gain', 'Width', 'Dry/Wet')}), ('Global', {BANK_PARAMETERS_KEY: ('Mode', 'Decay', 'Const', 'Color', '', 'Width', 'Global Gain', 'Dry/Wet')}), ('Filter', {BANK_PARAMETERS_KEY: ('Filter On', 'Frequency', 'Filter Type', '', '', '', '', '')}), ('Mode I & II', {BANK_PARAMETERS_KEY: ('I On', 'I Note', 'I Tune', 'I Gain', 'II On', 'II Pitch', 'II Tune', 'II Gain')}), ('Mode V', {BANK_PARAMETERS_KEY: ('V On', 'V Pitch', 'V Tune', 'V Gain',
BANK_DEFINITIONS['Reverb'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Predelay', 'In Filter Freq', 'Chorus Amount', 'Stereo Image', 'Room Size', 'Decay Time', 'Diffuse Level', 'Dry/Wet')}), ('Global', {BANK_PARAMETERS_KEY: ('Chorus On', 'Chorus Rate', 'Chorus Amount', 'Density', 'Freeze On', 'Flat On', 'Reflect Level', 'Diffuse Level')}), ('Diffusion Network', {BANK_PARAMETERS_KEY: ('HiFilter On', 'HiFilter Freq', 'HiShelf Gain', 'LowShelf On', 'LowShelf Freq', 'LowShelf Gain', 'Diffusion', 'Scale')}), ('Input/Reflections', {BANK_PARAMETERS_KEY: ('In LowCut On', 'In HighCut On', 'In Filter Freq', 'In Filter Width', 'ER Spin On', 'ER Spin Rate', 'ER Spin Amount', 'ER Shape')})))
BANK_DEFINITIONS['Roar'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Drive', 'Shaper 1 Type', 'Shaper 1 Amt', 'Shaper 1 Bias', 'Flt 1 Freq', 'Comp Amt', 'Output', 'Dry/Wet')}),))
Fe < Env['Fe Retrig'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Filter Freq', 'Filter Res', 'Fe < Env', 'Fe Decay', 'Ve Attack', 'Ve Release', 'Transpose', 'Volume')}), ('Volume', {BANK_PARAMETERS_KEY: ('Volume', 'Ve Attack', 'Ve Decay', 'Ve Sustain', 'Ve Release', 'Vol < Vel', 'Ve R < Vel', 'Time')}), ('Filter', {BANK_PARAMETERS_KEY: ('Filter Type', 'use', 'Filter Morph', 'if_parameter', 'Filter Type', 'has_value', 'Morph', 'else_use', 'Filter Drive').has_value('Filt < Vel'), 'Filt < Key', 'Shaper Amt', 'Filter Envelope', 'Fe Attack', 'Fe Peak', 'Fe Sustain', 'Fe Release', 'Fe End', 'Fe Mode', 'Fe Loop', 'Loop', 'Fe Retrig')}), ('LFO 1', {BANK_PARAMETERS_KEY: (
BANK_DEFINITIONS['Saturator'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Drive', 'Type', 'Color On', 'Color Amt Low', 'Color Freq', 'Color Width', 'Color Amt Hi', 'Output')}), ('Waveshaper', {BANK_PARAMETERS_KEY: ('Type', use('WS Drive').if_parameter('Type').has_value('Waveshaper'), use('WS Curve').if_parameter('Type').has_value('Waveshaper'), use('WS Depth').if_parameter('Type').has_value('Waveshaper'), use('WS Linearity').if_parameter('Type').has_value('Waveshaper'), use('WS Damp').if_parameter('Type').has_value('Waveshaper'), use('WS Period').if_parameter('Type').has_value('Waveshaper'), 'Dry/Wet')})))
BANK_DEFINITIONS['MidiScale'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Base', 'Transpose', 'Range', 'Lowest', 'Fold', '', '', '')}),))
BANK_DEFINITIONS['Shifter'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Mode', use('Pitch Coarse').with_name('Coarse').if_parameter('Mode').has_value('Pitch').else_use('FShift Coarse').with_name('Coarse').if_parameter('Mode').has_value('Freq').else_use('RM Coarse').has_value('Pitch Fine').with_name('Spread').if_parameter('Mode').else_use('Mod Fine').with_name('Fine'), use('Lfo Waveform').with_name('Waveform'), 'Lfo Sync', use('Lfo S. Rate').with_name('S. Rate').if_parameter('Lfo Sync').has_value('Pitch').else_use('Lfo Amount Hz').with_name('Amount'), 'Dry/Wet')}),))
BANK_DEFINITIONS['OriginalSimpler'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Filter Freq', 'Filter Res', 'S Start', 'S Length', 'Ve Attack', 'Ve Release', 'Transpose', 'Volume')}), ('Amplitude', {BANK_PARAMETERS_KEY: ('Ve Attack', 'Ve Decay', 'Ve Sustain', 'Ve Release', 'S Start', 'S Loop Length', 'S Length', 'S Loop Fade')}), ('Filter', {BANK_PARAMETERS_KEY: ('Fe Attack', 'Fe Decay', 'Fe Sustain', 'Fe Release', 'Filter Freq', 'Filter Res', 'Filt < Vel', 'Fe < Env')}), ('LFO', {BANK_PARAMETERS_KEY: ('L Attack', use('L Rate').if_parameter('L Sync').has_value('Free'), 'L R < Key', 'L Wave', 'Vol < LFO', 'Filt < LFO', 'Pitch < LFO', 'Pan < LFO')}), ('Pitch Modifiers', {BANK_PARAMETERS_KEY: ('Pe Attack',
BANK_DEFINITIONS['Transmute'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: (use('Transpose').if_parameter('Pitch Mode').has_value('MIDI').else_use('Freq. Hz').with_name('Freq').if_parameter('Hz/Note Mode').has_value('ModulationHertz').else_use('Note').with_name('Freq'), 'Hz/Note Mode', 'Decay', 'Stretch', 'Shift', 'Unison', use('Input Send Gain').with_name('Input Send'), use('Dry Wet').with_name('Dry/Wet'))}),))
BANK_DEFINITIONS['Spectral'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Frozen', use('Delay Time Seconds').with_name('Del. Time').if_parameter('Delay Dly. Unit').has_value('Time').else_use('Delay Time Divisions').if_parameter('Delay Dly. Unit').has_value('Notes').else_use('Delay Time Sixteenths').with_name('Del. Time').if_parameter('Delay Dly. Unit').has_value('16th').with_name('Del. Time'), use('Delay Feedback').with_name('Feedback'), use('Delay Frequency Shift').with_name('Shift'), use('Delay Tilt').with_name('Tilt'), use('Delay Spray').with_name('Spray'), use('Delay Mask').with_name('Mask'), use('Dry Wet').with_name('Dry/Wet'))}),))
BANK_DEFINITIONS: StringStudio = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Filter Freq', 'Filter Reso', 'Filter Type', 'Exciter Type', 'E Pos', 'String Decay', 'Str Damping', 'Volume')}), ('Exciter and String', {BANK_PARAMETERS_KEY: ('Exciter Type', 'String Decay', 'Str Inharmon', 'Str Damping', 'Exc ForceMassProt', 'Exc FricStiff', 'Exc Velocity', 'E Pos')}), ('Damper', {BANK_PARAMETERS_KEY: ('Damper On', 'Damper Mass', 'D Stiffness', 'D Velocity', 'Damp Pos', 'D Damping', 'D Pos < Vel', 'D Pos Abs')}), ('Termination and Pickup', {BANK_PARAMETERS_KEY: ('Term On/Off', 'Term Mass', 'Term Fng Stiff', 'Term Fret Stiff', 'Pickup On/Off', 'Pickup Pos', 'T Mass < Vel', 'T Mass < Key')}), ('Body', {BANK_PARAMETERS_KEY: ('Body On/Off', 'Body Type', 'Body Size', 'Body Decay', '
BANK_DEFINITIONS['StereoGain'] = IndexedDict((('Utility', {BANK_PARAMETERS_KEY: ('Left Inv', 'Right Inv', 'Channel Mode', use('Stereo Width').if_parameter('Stereo Width').is_available(True).else_use('Mid/Side Balance'), 'Mono', 'Balance', use('Gain').if_parameter('Gain').is_available(True).else_use('Gain (Legacy)'), 'Mute')}), ('Low Freq', {BANK_PARAMETERS_KEY: (use('Bass Mono').if_parameter('Bass Mono').is_available(True), use('Bass Freq').if_parameter('Bass Freq').is_available(True), '', 'DC Filter', '', '', '', '')})))
BANK_DEFINITIONS['MidiVelocity'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Mode', 'Drive', 'Compand', 'Out Hi', 'Out Low', 'Range', 'Lowest', 'Random')}),))
BANK_DEFINITIONS['Vinyl'] = IndexedDict((('Global', {BANK_PARAMETERS_KEY: ('Tracing On', 'Tracing Drive', 'Tracing Freq.', 'Tracing Width', 'Pinch On', 'Global Drive', 'Crackle Density', 'Crackle Volume')}), ('Pinch', {BANK_PARAMETERS_KEY: ('Pinch On', 'Pinch Soft On', 'Pinch Mono On', 'Pinch Width', 'Pinch Drive', 'Pinch Freq.', 'Crackle Density', 'Crackle Volume')})))
BANK_DEFINITIONS['Vocoder'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Formant Shift', 'Attack Time', 'Release Time', 'Unvoiced Level', 'Gate Threshold', 'Filter Bandwidth', 'Envelope Depth', 'Dry/Wet')}), ('Carrier', {BANK_PARAMETERS_KEY: ('Noise Rate', 'Noise Crackle', 'Upper Pitch Detection', 'Lower Pitch Detection', 'Oscillator Pitch', 'Oscillator Waveform', '', '')}), ('Global', {BANK_PARAMETERS_KEY: ('Formant Shift', 'Attack Time', 'Release Time', 'Mono/Stereo', 'Output Level', 'Gate Threshold', 'Envelope Depth', 'Dry/Wet')}), ('Filters/Voicing', {BANK_PARAMETERS_KEY: ('Filter Bandwidth', 'Upper Filter Band', 'Lower Filter Band', 'Precise/Retro', 'Unvoiced Level', 'Unvoiced Sensitivity', 'Unvoiced Speed', 'Enhance')})))
Osc 2 Pos['InstrumentVector'] = IndexedDict(((BANK_MAIN_KEY, {BANK_PARAMETERS_KEY: ('Osc 1 Pos', 'Osc 1 Transp', 'Osc 2 Pos', 'Osc 2 Transp', 'Filter 1 Freq', 'Filter 1 Res', 'Global Mod Amount', 'Volume')}), ('Oscillator 1', {BANK_PARAMETERS_KEY: ('Osc 1 Transp', 'Osc 1 Detune', 'Osc 1 Pos', 'Osc 1 Effect 1', 'Osc 1 Effect 2', 'Osc 1 Pan', 'Osc 1 Gain', 'Osc 1 On')}), ('Filter 1', {BANK_PARAMETERS_KEY: ('Filter 1 On', 'Filter 1 Freq', 'Filter 1 Res', 'use('Filter 1 Morph').if_parameter('Filter 1 Type'), 'Filter 1 Slope', use('Filter 1 LP/HP').if_parameter('Filter 1 Type'), 'Filter 1 Slope', use('Filter 1 LP/HP').if_parameter('Filter 1 Type'), 'Filter 1 Slope')}), ('Osc 1 Gain', {BANK_PARAMETERS_KEY: ('Oscillator 1', 'Osc 1 Detune', 'Osc 1 Pos', 'Osc 1 Effect 1', 'Osc 1 Effect 2', 'Osc 1 Pan', 'Osc 1 Gain', 'Osc 1 On'